import requests
import pandas as pd
from datetime import datetime, timezone, timedelta
from tabulate import tabulate

# ========== C·∫§U H√åNH ==========
# Danh s√°ch c√°c c·∫∑p coin c·∫ßn backtest
SYMBOLS = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT"]

# Khung th·ªùi gian
TIMEFRAMES = ["1h", "4h", "1d"]

# Tham s·ªë ph√°t hi·ªán Doji
DOJI_THRESHOLD_PERCENT = 7  # X% = 7%
VOLUME_RATIO_THRESHOLD = 0.8  # Volume <= 80%

# S·ªë n·∫øn backtest
BACKTEST_CANDLES = 100

# ========== H√ÄM L·∫§Y D·ªÆ LI·ªÜU L·ªäCH S·ª¨ ==========
def get_historical_klines(symbol, interval, limit=100):
    """
    L·∫•y d·ªØ li·ªáu n·∫øn l·ªãch s·ª≠ t·ª´ Binance API
    """
    url = "https://api.binance.com/api/v3/klines"
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": limit
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        candles = []
        for candle in data:
            candles.append({
                "open_time": candle[0],
                "open": float(candle[1]),
                "high": float(candle[2]),
                "low": float(candle[3]),
                "close": float(candle[4]),
                "volume": float(candle[5]),
                "close_time": candle[6]
            })
        return candles
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu {symbol}: {e}")
        return None

# ========== H√ÄM PH√ÅT HI·ªÜN N·∫æN DOJI ==========
def is_doji_with_low_volume(current_candle, previous_candle, threshold_percent=7, volume_ratio=0.8):
    """
    Ki·ªÉm tra n·∫øn Doji v·ªõi ƒëi·ªÅu ki·ªán volume th·∫•p
    """
    open_price = current_candle["open"]
    close_price = current_candle["close"]
    high_price = current_candle["high"]
    low_price = current_candle["low"]
    current_volume = current_candle["volume"]
    previous_volume = previous_candle["volume"]
    
    # T√≠nh to√°n
    body = abs(close_price - open_price)
    full_range = high_price - low_price
    
    # Tr√°nh chia cho 0
    if full_range == 0 or previous_volume == 0:
        return False, None
    
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán Doji
    threshold = (threshold_percent / 100) * full_range
    is_doji = body <= threshold
    
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán Volume
    is_low_volume = current_volume <= (volume_ratio * previous_volume)
    
    # T√≠nh c√°c ch·ªâ s·ªë
    body_percent = (body / full_range) * 100 if full_range > 0 else 0
    volume_change_percent = ((current_volume - previous_volume) / previous_volume) * 100
    
    details = {
        "body_percent": round(body_percent, 2),
        "volume_change_percent": round(volume_change_percent, 2),
        "current_volume": current_volume,
        "previous_volume": previous_volume,
        "close": close_price,
        "open": open_price,
        "high": high_price,
        "low": low_price,
        "full_range": full_range,
        "body": body,
        "threshold": threshold
    }
    
    return (is_doji and is_low_volume), details

# ========== H√ÄM CHUY·ªÇN ƒê·ªîI TH·ªúI GIAN ==========
def timestamp_to_datetime(timestamp_ms):
    """Chuy·ªÉn timestamp milliseconds sang datetime string (gi·ªù Vi·ªát Nam)"""
    dt = datetime.fromtimestamp(timestamp_ms / 1000, tz=timezone.utc)
    dt_vietnam = dt + timedelta(hours=7)
    return dt_vietnam.strftime("%d/%m/%Y %H:%M")

def timeframe_to_text(timeframe):
    """Chuy·ªÉn ƒë·ªïi timeframe sang text"""
    mapping = {
        "1h": "H1",
        "4h": "H4",
        "1d": "D1"
    }
    return mapping.get(timeframe, timeframe)

# ========== H√ÄM BACKTEST ==========
def backtest_symbol(symbol, timeframe, num_candles=100):
    """
    Backtest m·ªôt symbol tr√™n m·ªôt timeframe
    Tr·∫£ v·ªÅ danh s√°ch c√°c t√≠n hi·ªáu Doji t√¨m ƒë∆∞·ª£c
    """
    print(f"\n{'='*60}")
    print(f"üîç Backtest: {symbol} - {timeframe_to_text(timeframe)}")
    print(f"{'='*60}")
    
    # L·∫•y d·ªØ li·ªáu (l·∫•y th√™m 1 n·∫øn ƒë·ªÉ c√≥ previous candle cho n·∫øn ƒë·∫ßu ti√™n)
    candles = get_historical_klines(symbol, timeframe, limit=num_candles + 1)
    
    if not candles or len(candles) < 2:
        print("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ backtest")
        return []
    
    signals = []
    
    # Duy·ªát qua c√°c n·∫øn (b·ªè qua n·∫øn ƒë·∫ßu ti√™n v√¨ c·∫ßn previous candle)
    for i in range(1, len(candles)):
        previous_candle = candles[i-1]
        current_candle = candles[i]
        
        is_signal, details = is_doji_with_low_volume(
            current_candle,
            previous_candle,
            threshold_percent=DOJI_THRESHOLD_PERCENT,
            volume_ratio=VOLUME_RATIO_THRESHOLD
        )
        
        if is_signal:
            signal = {
                "symbol": symbol,
                "timeframe": timeframe_to_text(timeframe),
                "close_time": timestamp_to_datetime(current_candle["close_time"]),
                "price": details["close"],
                "body_percent": details["body_percent"],
                "volume_change": details["volume_change_percent"],
                "open": details["open"],
                "high": details["high"],
                "low": details["low"],
                "close": details["close"],
                "body": details["body"],
                "range": details["full_range"],
                "threshold": details["threshold"]
            }
            signals.append(signal)
    
    # In k·∫øt qu·∫£
    if signals:
        print(f"\n‚úÖ T√¨m th·∫•y {len(signals)} t√≠n hi·ªáu Doji h·ª£p l·ªá:\n")
        
        # T·∫°o b·∫£ng hi·ªÉn th·ªã
        table_data = []
        for idx, sig in enumerate(signals, 1):
            table_data.append([
                idx,
                sig["close_time"],
                f"${sig['price']:.4f}",
                f"{sig['body_percent']:.2f}%",
                f"{sig['volume_change']:.2f}%"
            ])
        
        headers = ["#", "Th·ªùi gian ƒë√≥ng n·∫øn", "Gi√°", "Body %", "Volume Change"]
        print(tabulate(table_data, headers=headers, tablefmt="grid"))
        
        # In chi ti·∫øt m·ªôt v√†i t√≠n hi·ªáu
        print(f"\nüìã Chi ti·∫øt 3 t√≠n hi·ªáu ƒë·∫ßu ti√™n:\n")
        for idx, sig in enumerate(signals[:3], 1):
            print(f"T√≠n hi·ªáu #{idx}:")
            print(f"  ‚Ä¢ Th·ªùi gian: {sig['close_time']}")
            print(f"  ‚Ä¢ Gi√°: ${sig['price']:.4f}")
            print(f"  ‚Ä¢ Open: ${sig['open']:.4f}, High: ${sig['high']:.4f}, Low: ${sig['low']:.4f}, Close: ${sig['close']:.4f}")
            print(f"  ‚Ä¢ Body: ${sig['body']:.4f} (={sig['body_percent']:.2f}% c·ªßa range)")
            print(f"  ‚Ä¢ Full Range: ${sig['range']:.4f}")
            print(f"  ‚Ä¢ Threshold (7% range): ${sig['threshold']:.4f}")
            print(f"  ‚Ä¢ Body <= Threshold? {sig['body']} <= {sig['threshold']:.4f} = {'‚úÖ YES' if sig['body'] <= sig['threshold'] else '‚ùå NO'}")
            print(f"  ‚Ä¢ Volume change: {sig['volume_change']:.2f}%")
            print()
    else:
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y t√≠n hi·ªáu Doji n√†o trong kho·∫£ng th·ªùi gian n√†y")
    
    return signals

# ========== H√ÄM BACKTEST T·∫§T C·∫¢ ==========
def run_full_backtest():
    """
    Ch·∫°y backtest tr√™n t·∫•t c·∫£ symbols v√† timeframes
    """
    print("\n" + "="*60)
    print("üöÄ B·∫ÆT ƒê·∫¶U BACKTEST LOGIC N·∫æN DOJI")
    print("="*60)
    print(f"\nüìä C·∫•u h√¨nh:")
    print(f"  ‚Ä¢ Symbols: {', '.join(SYMBOLS)}")
    print(f"  ‚Ä¢ Timeframes: {', '.join([timeframe_to_text(tf) for tf in TIMEFRAMES])}")
    print(f"  ‚Ä¢ S·ªë n·∫øn backtest: {BACKTEST_CANDLES}")
    print(f"  ‚Ä¢ Ng∆∞·ª°ng Doji: {DOJI_THRESHOLD_PERCENT}%")
    print(f"  ‚Ä¢ Ng∆∞·ª°ng Volume: {VOLUME_RATIO_THRESHOLD * 100}%")
    
    all_signals = []
    
    # Backtest t·ª´ng symbol v√† timeframe
    for symbol in SYMBOLS:
        for timeframe in TIMEFRAMES:
            signals = backtest_symbol(symbol, timeframe, BACKTEST_CANDLES)
            all_signals.extend(signals)
    
    # T·ªïng k·∫øt
    print("\n" + "="*60)
    print("üìà T·ªîNG K·∫æT BACKTEST")
    print("="*60)
    print(f"\n‚úÖ T·ªïng s·ªë t√≠n hi·ªáu t√¨m th·∫•y: {len(all_signals)}")
    
    # Th·ªëng k√™ theo timeframe
    print(f"\nüìä Ph√¢n b·ªë theo khung th·ªùi gian:")
    for tf in TIMEFRAMES:
        tf_text = timeframe_to_text(tf)
        count = len([s for s in all_signals if s["timeframe"] == tf_text])
        print(f"  ‚Ä¢ {tf_text}: {count} t√≠n hi·ªáu")
    
    # Th·ªëng k√™ theo symbol
    print(f"\nüìä Ph√¢n b·ªë theo symbol:")
    for symbol in SYMBOLS:
        count = len([s for s in all_signals if s["symbol"] == symbol])
        print(f"  ‚Ä¢ {symbol}: {count} t√≠n hi·ªáu")
    
    # In t·∫•t c·∫£ t√≠n hi·ªáu d·∫°ng b·∫£ng
    if all_signals:
        print(f"\nüìã DANH S√ÅCH T·∫§T C·∫¢ T√çN HI·ªÜU:\n")
        table_data = []
        for idx, sig in enumerate(all_signals, 1):
            table_data.append([
                idx,
                sig["symbol"],
                sig["timeframe"],
                sig["close_time"],
                f"${sig['price']:.4f}",
                f"{sig['body_percent']:.2f}%",
                f"{sig['volume_change']:.2f}%"
            ])
        
        headers = ["#", "Symbol", "TF", "Th·ªùi gian", "Gi√°", "Body %", "Vol Change"]
        print(tabulate(table_data, headers=headers, tablefmt="grid"))
        
        # L∆∞u k·∫øt qu·∫£ ra file CSV
        try:
            df = pd.DataFrame(all_signals)
            filename = f"doji_backtest_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False)
            print(f"\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: {filename}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u file CSV: {e}")
    
    print("\n" + "="*60)
    print("‚úÖ HO√ÄN TH√ÄNH BACKTEST")
    print("="*60)

# ========== MAIN ==========
if __name__ == "__main__":
    try:
        run_full_backtest()
    except KeyboardInterrupt:
        print("\n\n‚õî ƒê√£ d·ª´ng backtest!")
    except Exception as e:
        print(f"\n\n‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()